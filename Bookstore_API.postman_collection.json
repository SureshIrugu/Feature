{
	"info": {
		"_postman_id": "3f58e9cd-84d5-4a30-a4f0-49a438280183",
		"name": "Bookstore_API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "ACCOUNT",
			"item": [
				{
					"name": "Create account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"UserID\", jsonData.userID);",
									"",
									"pm.test(\"Successfully User created status code.\", function () {",
									"    pm.expect(pm.response.code).to.be.eql(201);",
									"});",
									"",
									"pm.test(\"User is created Successfully\", function () {",
									"    pm.expect(jsonData.username).to.be.equal(pm.environment.get(\"userName\"));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "userName",
									"value": "{{userName}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{server}}/Account/v1/User",
							"host": [
								"{{server}}"
							],
							"path": [
								"Account",
								"v1",
								"User"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Account with Invalid Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Fail to create a account.\", function () {",
									"    pm.expect(pm.response.code).to.be.eql(400);",
									"});",
									"",
									"pm.test(\"Password is not meeting expectations.\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Passwords must have at least one non alphanumeric character, one digit ('0'-'9'), one uppercase ('A'-'Z'), one lowercase ('a'-'z'), one special character and Password must be eight characters or longer.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "userName",
									"value": "12123123",
									"type": "text"
								},
								{
									"key": "password",
									"value": "erwer",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{server}}/Account/v1/User",
							"host": [
								"{{server}}"
							],
							"path": [
								"Account",
								"v1",
								"User"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"bearer_token\", jsonData.token);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"User authorized successfully.\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"User authorized successfully.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Connection",
								"value": "keep-alive",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userName\":\"{{userName}}\",\n    \"password\":\"{{password}}\"\n}"
						},
						"url": {
							"raw": "{{server}}/Account/v1/GenerateToken",
							"host": [
								"{{server}}"
							],
							"path": [
								"Account",
								"v1",
								"GenerateToken"
							]
						}
					},
					"response": []
				},
				{
					"name": "Token with invalid user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Generate token with invalid user.\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"User authorization failed.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"connection": true,
							"content-type": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Connection",
								"value": "keep-alive",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "userName",
									"value": "sureshTests",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{server}}/Account/v1/GenerateToken",
							"host": [
								"{{server}}"
							],
							"path": [
								"Account",
								"v1",
								"GenerateToken"
							]
						}
					},
					"response": []
				},
				{
					"name": "Authorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Valid user to authenticate.\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"true\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "userName",
									"value": "{{userName}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{server}}/Account/v1/Authorized",
							"host": [
								"{{server}}"
							],
							"path": [
								"Account",
								"v1",
								"Authorized"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unauthorized To Demobook[Invlid user]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Invlid user to authenticate\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"User not found!\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "userName",
									"value": "suresh",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{server}}/Account/v1/Authorized",
							"host": [
								"{{server}}"
							],
							"path": [
								"Account",
								"v1",
								"Authorized"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unauthorized  To Dembook[Invalid PSWD]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"User not found!\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"User not found!\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "userName",
									"value": "{{userName}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "Test@321",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{server}}/Account/v1/Authorized",
							"host": [
								"{{server}}"
							],
							"path": [
								"Account",
								"v1",
								"Authorized"
							]
						}
					},
					"response": []
				},
				{
					"name": "User details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Verified UserID details\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.userId).to.be.equal(pm.environment.get('UserID'));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{bearer_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{server}}/Account/v1/User/{{UserID}}",
							"host": [
								"{{server}}"
							],
							"path": [
								"Account",
								"v1",
								"User",
								"{{UserID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "InvalidUser details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Fetching invalid userid\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"User not found!\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{bearer_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{server}}/Account/v1/User/824583458924",
							"host": [
								"{{server}}"
							],
							"path": [
								"Account",
								"v1",
								"User",
								"824583458924"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "BookStore",
			"item": [
				{
					"name": "All Books details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"validate books\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"books\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Connection",
								"value": "keep-alive",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"books\": [\n    {\n      \"isbn\": \"string\",\n      \"title\": \"string\",\n      \"subTitle\": \"string\",\n      \"author\": \"string\",\n      \"publish_date\": \"2022-04-24T01:06:00.874Z\",\n      \"publisher\": \"string\",\n      \"pages\": 0,\n      \"description\": \"string\",\n      \"website\": \"string\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{server}}/BookStore/v1/Books",
							"host": [
								"{{server}}"
							],
							"path": [
								"BookStore",
								"v1",
								"Books"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Books to list",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"isbn\", jsonData.books[1].isbn);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
									"});",
									"pm.test(\"Books added to user list.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.books[1].isbn).to.be.equal('9781491904244');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{bearer_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userId\":\"{{UserID}}\",\n    \"collectionOfIsbns\":\n    [\n        {\n            \"isbn\":\"9781449325862\"\n        },\n         {\n            \"isbn\":\"9781491904244\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{server}}​/BookStore/v1/Books",
							"host": [
								"{{server}}​"
							],
							"path": [
								"BookStore",
								"v1",
								"Books"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add unknown Book to list",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400.\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Force to add unknow book into list.\", function () {",
									"    var jsonData = pm.response.json();",
									"     pm.expect(pm.response.text()).to.include('ISBN supplied is not available in Books Collection!');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{bearer_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userId\":\"{{UserID}}\",\n    \"collectionOfIsbns\":\n    [\n        {\n            \"isbn\":\"9781448348345\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{server}}​/BookStore/v1/Books",
							"host": [
								"{{server}}​"
							],
							"path": [
								"BookStore",
								"v1",
								"Books"
							]
						}
					},
					"response": []
				},
				{
					"name": "Replace book in list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Book replaced to user list.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.books[1].isbn).to.be.equal('9781593277574');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{bearer_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n \"userId\":\"{{UserID}}\",\n   \"isbn\":\"9781593277574\"\n}"
						},
						"url": {
							"raw": "{{server}}/BookStore/v1/Books/{{isbn}}",
							"host": [
								"{{server}}"
							],
							"path": [
								"BookStore",
								"v1",
								"Books",
								"{{isbn}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Book details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Fetching book details based on from list.\", function () {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData.isbn).to.eql('9781491904244');",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{server}}/BookStore/v1/Book?ISBN={{isbn}}",
							"host": [
								"{{server}}"
							],
							"path": [
								"BookStore",
								"v1",
								"Book"
							],
							"query": [
								{
									"key": "ISBN",
									"value": "{{isbn}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Unknown book details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"",
									"pm.test(\"Fetching unknow book details from list.\", function () {",
									"    var jsonData = pm.response.json();",
									"     pm.expect(pm.response.text()).to.include('ISBN supplied is not available in Books Collection!');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{server}}/BookStore/v1/Book?ISBN=978144933234",
							"host": [
								"{{server}}"
							],
							"path": [
								"BookStore",
								"v1",
								"Book"
							],
							"query": [
								{
									"key": "ISBN",
									"value": "978144933234"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Book form list",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{bearer_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "isbn",
									"value": "9781449325862",
									"type": "text"
								},
								{
									"key": "userId",
									"value": "{{UserID}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{server}}/BookStore/v1/Book",
							"host": [
								"{{server}}"
							],
							"path": [
								"BookStore",
								"v1",
								"Book"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete unlisted Book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"",
									"pm.test(\"Deleting unlisted Book in user list.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(pm.response.text()).to.include(\"ISBN supplied is not available in User's Collection!\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{bearer_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "isbn",
									"value": "9781593275846",
									"type": "text"
								},
								{
									"key": "userId",
									"value": "{{UserID}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{server}}/BookStore/v1/Book",
							"host": [
								"{{server}}"
							],
							"path": [
								"BookStore",
								"v1",
								"Book"
							]
						}
					},
					"response": []
				},
				{
					"name": "All books from list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Connection",
								"value": "keep-alive",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Bearer {{bearer_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{server}}/BookStore/v1/Books?UserId={{UserID}}",
							"host": [
								"{{server}}"
							],
							"path": [
								"BookStore",
								"v1",
								"Books"
							],
							"query": [
								{
									"key": "UserId",
									"value": "{{UserID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "All books from invlid userID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Deleting books from invalid userID.\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"User Id not correct!\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Connection",
								"value": "keep-alive",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Bearer {{bearer_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{server}}/BookStore/v1/Books?UserId=35754243532495",
							"host": [
								"{{server}}"
							],
							"path": [
								"BookStore",
								"v1",
								"Books"
							],
							"query": [
								{
									"key": "UserId",
									"value": "35754243532495"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "invalid user account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Trying to delete invalid userID.\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"User Id not correct!\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{bearer_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{server}}/Account/v1/User/12343452",
							"host": [
								"{{server}}"
							],
							"path": [
								"Account",
								"v1",
								"User",
								"12343452"
							]
						}
					},
					"response": []
				},
				{
					"name": "User account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{bearer_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{server}}/Account/v1/User/{{UserID}}",
							"host": [
								"{{server}}"
							],
							"path": [
								"Account",
								"v1",
								"User",
								"{{UserID}}"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyTmFtZSI6InN1cmVzaEkiLCJwYXNzd29yZCI6IlRlc3RAMTIzIiwiaWF0IjoxNjUwNzcyMzgxfQ.WVAjahoyWQhe_9myU0THAdOudU4ITiMI27r4aPfc-3U",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	]
}